// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// **************************************
// ********** Next Auth Models **********
// **************************************

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// *************************************
// ********** Taskbrew Models **********
// *************************************

model User {
  // properties
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  tasks     Task[]
  feedbacks Feedback[]
  mindsets  Mindset[]

  // next auth stuff
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Task {
  // properties
  id          String     @id @default(cuid())
  title       String
  status      TaskStatus @default(NOT_STARTED)
  completedAt DateTime?
  startAt     DateTime?
  dueDate     DateTime?
  duration    Int?
  listOrder   Int
  boardOrder  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  mindset   Mindset? @relation(fields: [mindsetId], references: [id], onDelete: SetNull)
  mindsetId String?

  // indexes
  @@index([userId])
}

model Feedback {
  // properties
  id        String       @id @default(cuid())
  type      FeedbackType
  message   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Mindset {
  // properties
  id          String              @id @default(cuid())
  title       String
  color       Color
  timePeriods MindsetTimePeriod[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  tasks  Task[]
}

model MindsetTimePeriod {
  // properties
  id        String        @id @default(cuid())
  day       DaysOfTheWeek
  startTime String
  endTime   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // relations
  mindset   Mindset @relation(fields: [mindsetId], references: [id], onDelete: Cascade)
  mindsetId String
}

// ***************************
// ********** Enums **********
// ***************************

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum FeedbackType {
  POSITIVE
  NEGATIVE
  IDEA
}

enum DaysOfTheWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Color {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  BROWN
}
